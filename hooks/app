// App.jsx
import { useState, useRef, useEffect } from 'react';
import { CodeBlock, MessageInput, ModelControls } from './components';

export default function App() {
  const [messages, setMessages] = useState([]);
  const [sessions, setSessions] = useState([]);
  const [currentSession, setCurrentSession] = useState(null);
  const [modelParams, setModelParams] = useState({
    model: 'llama3',
    temperature: 0.7,
    top_p: 0.9
  });
  const abortController = useRef(null);

  // Load sessions from localStorage
  useEffect(() => {
    const saved = localStorage.getItem('chat_sessions');
    if (saved) setSessions(JSON.parse(saved));
  }, []);

  const sendMessage = async (text) => {
    abortController.current = new AbortController();
    const newMessage = { role: 'user', content: text };
    
    setMessages(prev => [...prev, newMessage]);
    
    const eventSource = new EventSource(`/api/chat?query=${encodeURIComponent(text)}`);
    let assistantMessage = '';
    
    eventSource.onmessage = (e) => {
      const data = JSON.parse(e.data);
      assistantMessage += data.content;
      
      setMessages(prev => {
        const last = prev[prev.length - 1];
        if (last?.role === 'assistant') {
          return [...prev.slice(0, -1), { ...last, content: assistantMessage }];
        }
        return [...prev, { role: 'assistant', content: assistantMessage }];
      });
    };

    eventSource.onerror = () => {
      eventSource.close();
    };
  };

  const stopGeneration = () => {
    abortController.current?.abort();
  };

  const regenerate = () => {
    if (messages.length > 0) {
      const lastUserMessage = messages.findLast(m => m.role === 'user');
      if (lastUserMessage) sendMessage(lastUserMessage.content);
    }
  };

  return (
    <div className="app-container">
      <div className="sidebar">
        <SessionList 
          sessions={sessions}
          onSelect={setCurrentSession}
        />
        <ModelControls
          params={modelParams}
          onChange={setModelParams}
        />
      </div>
      
      <div className="chat-area">
        <MessageList 
          messages={messages}
          onCopy={copyToClipboard}
        />
        
        <MessageInput
          onSubmit={sendMessage}
          onStop={stopGeneration}
          onRegenerate={regenerate}
        />
      </div>
    </div>
  );
}